import syspath
import datetime as dt
import pandas as pd
import psycopg2
from typing import Set
from cytoolz.curried import curry
import os
import sys

if os.getenv("MY_PYTHON_PKG") not in sys.path:
    sys.path.append(os.getenv("MY_PYTHON_PKG"))

__a = [
    [2005, 2, 5],
    [2006, 10, 14],
    [2007, 3, 3],
    [2007, 4, 14],
    [2007, 6, 23],
    [2007, 9, 29],
    [2009, 1, 10],
    [2009, 1, 17],
    [2009, 6, 6],
    [2010, 2, 6],
    [2012, 2, 4],
    [2012, 3, 3],
    [2012, 12, 22],
    [2013, 2, 23],
    [2013, 9, 14],
    [2014, 12, 27],
    [2016, 6, 4],
    [2016, 9, 10],
    [2017, 2, 18],
    [2017, 6, 3],
    [2017, 9, 30],
    [2018, 3, 31],
    [2018, 12, 22],
]
__add = set()
for day in __a:
    __add.add(dt.datetime(day[0], day[1], day[2]))

rm2004 = [
    [2004, 1, 1],
    [2004, 1, 19],
    [2004, 1, 20],
    [2004, 1, 21],
    [2004, 1, 22],
    [2004, 1, 23],
    [2004, 1, 26],
    [2004, 6, 22],
    [2004, 9, 28],
]

rm2005 = [
    [2005, 2, 7],
    [2005, 2, 8],
    [2005, 2, 9],
    [2005, 2, 10],
    [2005, 2, 11],
    [2005, 2, 28],
    [2005, 4, 5],
    [2005, 5, 2],
    [2005, 10, 10],
]

rm2006 = [
    [2006, 1, 30],
    [2006, 1, 31],
    [2006, 2, 1],
    [2006, 2, 2],
    [2006, 2, 28],
    [2006, 4, 5],
    [2006, 5, 1],
    [2006, 5, 31],
    [2006, 10, 6],
    [2006, 10, 9],
    [2006, 10, 10],
]

rm2007 = [
    [2007, 1, 1],
    [2007, 2, 19],
    [2007, 2, 20],
    [2007, 2, 21],
    [2007, 2, 22],
    [2007, 2, 23],
    [2007, 2, 28],
    [2007, 4, 5],
    [2007, 4, 6],
    [2007, 5, 1],
    [2007, 6, 18],
    [2007, 6, 19],
    [2007, 9, 24],
    [2007, 9, 25],
    [2007, 10, 10],
]

rm2008 = [
    [2008, 1, 1],
    [2008, 2, 6],
    [2008, 2, 7],
    [2008, 2, 8],
    [2008, 2, 11],
    [2008, 2, 28],
    [2008, 4, 4],
    [2008, 5, 1],
    [2008, 10, 10],
]

rm2009 = [
    [2009, 1, 1],
    [2009, 1, 2],
    [2009, 1, 22],
    [2009, 1, 23],
    [2009, 1, 26],
    [2009, 1, 27],
    [2009, 1, 28],
    [2009, 1, 29],
    [2009, 1, 30],
    [2009, 5, 1],
    [2009, 5, 28],
    [2009, 5, 29],
]

rm2010 = [
    [2010, 1, 1],
    [2010, 2, 11],
    [2010, 2, 12],
    [2010, 2, 15],
    [2010, 2, 16],
    [2010, 2, 17],
    [2010, 2, 18],
    [2010, 2, 19],
    [2010, 4, 5],
    [2010, 6, 16],
    [2010, 9, 22],
]

rm2011 = [
    [2011, 1, 1],
    [2011, 1, 31],
    [2011, 2, 1],
    [2011, 2, 2],
    [2011, 2, 3],
    [2011, 2, 4],
    [2011, 2, 7],
    [2011, 2, 28],
    [2011, 4, 4],
    [2011, 4, 5],
    [2011, 5, 2],
    [2011, 6, 6],
    [2011, 9, 12],
    [2011, 10, 10],
]

rm2012 = [
    [2012, 1, 19],
    [2012, 1, 20],
    [2012, 1, 23],
    [2012, 1, 24],
    [2012, 1, 25],
    [2012, 1, 26],
    [2012, 1, 27],
    [2012, 2, 27],
    [2012, 2, 28],
    [2012, 4, 4],
    [2012, 5, 1],
    [2012, 10, 10],
    [2012, 12, 31],
]

rm2013 = [
    [2013, 1, 1],
    [2013, 2, 7],
    [2013, 2, 8],
    [2013, 2, 11],
    [2013, 2, 12],
    [2013, 2, 13],
    [2013, 2, 14],
    [2013, 2, 15],
    [2013, 2, 28],
    [2013, 4, 4],
    [2013, 4, 5],
    [2013, 5, 1],
    [2013, 6, 12],
    [2013, 9, 19],
    [2013, 9, 20],
    [2013, 10, 10],
]

rm2014 = [
    [2014, 1, 1],
    [2014, 1, 28],
    [2014, 1, 29],
    [2014, 1, 30],
    [2014, 1, 31],
    [2014, 2, 3],
    [2014, 2, 4],
    [2014, 2, 28],
    [2014, 4, 4],
    [2014, 5, 1],
    [2014, 6, 2],
    [2014, 9, 8],
    [2014, 10, 10],
]

rm2015 = [
    [2015, 1, 1],
    [2015, 1, 2],
    [2015, 2, 16],
    [2015, 2, 17],
    [2015, 2, 18],
    [2015, 2, 19],
    [2015, 2, 20],
    [2015, 2, 23],
    [2015, 2, 27],
    [2015, 4, 3],
    [2015, 4, 6],
    [2015, 5, 1],
    [2015, 6, 19],
    [2015, 9, 28],
    [2015, 10, 9],
]

rm2016 = [
    [2016, 1, 1],
    [2016, 2, 4],
    [2016, 2, 5],
    [2016, 2, 8],
    [2016, 2, 9],
    [2016, 2, 10],
    [2016, 2, 11],
    [2016, 2, 12],
    [2016, 2, 29],
    [2016, 4, 4],
    [2016, 4, 5],
    [2016, 6, 9],
    [2016, 6, 10],
    [2016, 9, 15],
    [2016, 9, 16],
    [2016, 10, 10],
]

rm2017 = [
    [2017, 1, 2],
    [2017, 1, 25],
    [2017, 1, 26],
    [2017, 1, 27],
    [2017, 1, 30],
    [2017, 1, 31],
    [2017, 2, 1],
    [2017, 2, 27],
    [2017, 2, 28],
    [2017, 4, 3],
    [2017, 4, 4],
    [2017, 5, 1],
    [2017, 5, 29],
    [2017, 5, 30],
    [2017, 10, 4],
    [2017, 10, 9],
    [2017, 10, 10],
]

rm2018 = [
    [2018, 1, 1],
    [2018, 2, 13],
    [2018, 2, 14],
    [2018, 2, 15],
    [2018, 2, 16],
    [2018, 2, 19],
    [2018, 2, 20],
    [2018, 2, 28],
    [2018, 4, 4],
    [2018, 4, 5],
    [2018, 4, 6],
    [2018, 5, 1],
    [2018, 6, 18],
    [2018, 9, 24],
    [2018, 10, 10],
    [2018, 12, 31],
]

rm2019 = [
    [2019, 1, 1],
    [2019, 1, 31],
    [2019, 2, 1],
    [2019, 2, 4],
    [2019, 2, 5],
    [2019, 2, 6],
    [2019, 2, 7],
    [2019, 2, 8],
    [2019, 2, 9],
    [2019, 2, 28],
    [2019, 3, 1],
    [2019, 4, 4],
    [2019, 4, 5],
    [2019, 5, 1],
    [2019, 6, 7],
    [2019, 9, 13],
    [2019, 10, 10],
    [2019, 10, 11],
]

rm2020 = [
    [2020, 1, 1],
    [2020, 1, 21],
    [2020, 1, 22],
    [2020, 1, 23],
    [2020, 1, 24],
    [2020, 1, 27],
    [2020, 1, 28],
    [2020, 1, 29],
    [2020, 2, 28],
    [2020, 4, 2],
    [2020, 4, 3],
    [2020, 5, 1],
    [2020, 6, 25],
    [2020, 6, 26],
    [2020, 10, 1],
    [2020, 10, 2],
    [2020, 10, 9],
]

rm2021 = [
    [2021, 1, 1],
    [2021, 2, 8],
    [2021, 2, 9],
    [2021, 2, 10],
    [2021, 2, 11],
    [2021, 2, 12],
    [2021, 2, 14],
    [2021, 2, 15],
    [2021, 2, 16],
    [2021, 3, 1],
    [2021, 4, 2],
    [2021, 4, 5],
    [2021, 4, 30],
    [2021, 6, 14],
    [2021, 9, 20],
    [2021, 9, 21],
    [2021, 10, 11],
    [2021, 12, 31],
]

rm2022 = [
    [2022, 1, 1],
    [2022, 1, 27],
    [2022, 1, 28],
    [2022, 1, 31],
    [2022, 2, 1],
    [2022, 2, 2],
    [2022, 2, 3],
    [2022, 2, 4],
    [2022, 2, 28],
    [2022, 4, 4],
    [2022, 4, 5],
    [2022, 5, 2],
    [2022, 6, 3],
    [2022, 9, 9],
    [2022, 10, 10],
]

rm2023 = [
    [2023, 1, 2],
    [2023, 1, 18],
    [2023, 1, 19],
    [2023, 1, 20],
    [2023, 1, 23],
    [2023, 1, 24],
    [2023, 1, 25],
    [2023, 1, 26],
    [2023, 1, 27],
    [2023, 2, 27],
    [2023, 2, 28],
    [2023, 4, 3],
    [2023, 4, 4],
    [2023, 4, 5],
    [2023, 5, 1],
    [2023, 6, 22],
    [2023, 6, 23],
    [2023, 8, 3],
    [2023, 9, 29],
    [2023, 10, 9],
    [2023, 10, 10],
]

rm2024 = [
    [2024, 1, 1],
    [2024, 2, 6],
    [2024, 2, 7],
    [2024, 2, 8],
    [2024, 2, 9],
    [2024, 2, 12],
    [2024, 2, 13],
    [2024, 2, 14],
    [2024, 2, 28],
    [2024, 4, 4],
    [2024, 4, 5],
    [2024, 5, 1],
    [2024, 6, 10],
    [2024, 9, 17],
    [2024, 10, 10],
]

__remove = set()

__abnormal = [
    "20040824",
    "20040825",
    "20041025",
    "20050204",
    "20050205",
    "20050718",
    "20050805",
    "20050901",
    "20060126",
    "20060127",
    "20070215",
    "20070216",
    "20070918",
    "20080204",
    "20080205",
    "20080728",
    "20080929",
    "20090807",
    "20120802",
    "20130821",
    "20140723",
    "20150710",
    "20150929",
    "20160502",
    "20160708",
    "20160927",
    "20160928",
    "20190809",
    "20190930",
]

abnormal = set([dt.datetime(int(i[0:4]), int(i[4:6]), int(i[6:8])) for i in __abnormal])

# abnormal = [[2004, 8, 24], [2004, 8, 25], [2004, 10, 24], [2005, 2, 4], [2005, 2, 5], [2005, 7, 18], [2005, 8, 5]]

for days in [
    rm2004,
    rm2005,
    rm2006,
    rm2007,
    rm2008,
    rm2009,
    rm2010,
    rm2011,
    rm2012,
    rm2013,
    rm2014,
    rm2015,
    rm2016,
    rm2017,
    rm2018,
    rm2019,
    rm2020,
    rm2021,
    rm2022,
    rm2023,
    rm2024,
]:
    for day in days:
        __remove.add(dt.datetime(day[0], day[1], day[2]))


def weekdays(firstday: dt.datetime) -> Set[dt.datetime]:
    today = dt.datetime.today()
    ndays = today - firstday
    days_trade = set([firstday])
    for i in range(ndays.days):
        day = firstday + dt.timedelta(days=i + 1)
        if day.weekday() != 5 and day.weekday() != 6:
            days_trade.add(day)
    return days_trade


weekdays(dt.datetime(2004, 2, 11))


@curry
def __days_trade(
    add: Set[dt.datetime],
    remove: Set[dt.datetime],
    abnormal: Set[dt.datetime],
    firstday: dt.datetime,
) -> Set[dt.datetime]:
    today = dt.datetime.today()
    wd = weekdays(firstday)
    a = {d for d in add if d >= firstday and d <= today}
    r = {d for d in remove if d >= firstday and d <= today}
    return wd.union(a).difference(r).difference(abnormal)


def days_trade(firstday: dt.datetime) -> Set[dt.datetime]:
    return __days_trade(__add, __remove, abnormal, firstday)
